@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// Create a modular scale. Returns a list of values.
@function makeScale($base: 16px, $max: 32px, $numb-of-values: 6, $rounding: false) {

	$scale: ();

	// One value will be smaller than the base.
	// One value will be the base itself.
	// The remaining values will be larger than the base.
	$numb-of-larger-values: $numb-of-values - 2;

	// The ratio we'll use to calculate the missing sizes.
	$scaling-ratio: nth-root($max / $base, $numb-of-larger-values);

	// Calculate and add a smaller size to the scale.
	// This is a half multiple below the base, because
	// a full multiple often results in an overly small
	// smaller size which can only be corrected by making
	// the max size smaller.
	$scale: append($scale, ($base + ($base / $scaling-ratio)) / 2);

	// Add the base size to the scale.
	$scale: append($scale, $base);

	// Calculate and add larger sizes to the scale.
	@for $i from 1 through ($numb-of-larger-values) {
		$size: $base * power($scaling-ratio, $i);
		$scale: append($scale, $size);
	}

	// Optionally round the scale.
	@if $rounding == true {
		@each $size-name, $size-value in $scale {
			$new-value: round($size-value);
			$scale: map-merge($scale, ($size-name: $new-value));
		}
	}

	@return $scale;
}

// Create a modular font scale. 
// Returns a nested list of font-size and line-height values.

@function makeFontScale(
	$base-size: 16px, 
	$base-line-height: 1.4,
	$max-size: 32px,
	$max-line-height: 1.25,
	$names-of-sizes: unquote("smaller, base, larger1, larger2, larger3, larger4"),
	$rounding: false
	) {

	$font-scale: ();
	$number-of-sizes: length($names-of-sizes);

	// If line-height params are unitless values, 
	// covert to unit values.
	$base-line-height: if(unitless($base-line-height), $base-size * $base-line-height, $base-line-height);
	$max-line-height: if(unitless($max-line-height), $max-size * $max-line-height, $max-line-height);

	// Create font-size and line-height scales
	$size-scale: makeScale($base-size, $max-size, $number-of-sizes, $rounding);
	$line-height-scale: makeScale($base-line-height, $max-line-height, $number-of-sizes, $rounding);
	
	// Pair each name with the correponding font-size 
	// and line-height, then add the size to the scale.
	@for $i from 1 to ($number-of-sizes + 1) {

		// Key for font-size
		$name-of-size: nth($names-of-sizes, $i);

		// Values for font-size
		$values: (
			font-size: nth($size-scale, $i),
			line-height: nth($line-height-scale, $i)
		);

		// Merge To the scale. 
		$font-scale: map-merge($font-scale, ($name-of-size: $values));
	}
 
	@return $font-scale;
}

// Augments a breakpoint map by building a "scale" property
// containing the specified sizes to each breakpoint.

@function makeSaneScale(
	$breakpoints: (
		// Phone sizes
		"default": (
			"base-font-size": 18px,
			"base-line-height": 1.5,
			"max-font-size": 28px,
			"max-line-height": 1.35,
			"rounding": false
		),
		// Tablet sizes and larger
		"tablet": (
			"media-query": "screen and (min-width: 600px)",
			"base-font-size": 20px,
			"base-line-height": 1.6,
			"max-font-size": 42px,
			"max-line-height": 1.25,
			"rounding": false
		)
	),
	$sizes: ("smaller", "base", "larger1", "larger2", "larger3", "larger4")
) {

	$sane-scale: ();

	@each $breakpoint-name, $breakpoint-value in $breakpoints {

		// Create the scale using breakpoint params provided.
		$scale: makeFontScale(
			map-get($breakpoint-value, "base-font-size"),
			map-get($breakpoint-value, "base-line-height"),
			map-get($breakpoint-value, "max-font-size"),
			map-get($breakpoint-value, "max-line-height"), 
			$sizes,
			map-get($breakpoint-value, "rounded")
		);

		$new-breakpoint-value: map-merge($breakpoint-value, ("scale": $scale));
		$sane-scale: map-merge($sane-scale, ($breakpoint-name: $new-breakpoint-value));
	}

	@return $sane-scale;
}

$sane-scale: makeSaneScale() !default;

/******************************************************
* MIXINS
******************************************************/

@mixin _setFontSize($font, $size, $breakpoint-name) {
	$normalize-ratio: map-get($font, "normalize-ratio");
	font-size: map-deep-get($sane-scale, $breakpoint-name, "scale", $size, "font-size") * $normalize-ratio;
	line-height: map-deep-get($sane-scale, $breakpoint-name, "scale", $size, "line-height") * $normalize-ratio;
}

@mixin setFontSize($font, $size, $breakpoint-name) {
	font-family: map-get($font, "family");
	@include _setFontSize($font, $size, $breakpoint-name);
}

@mixin setResponsiveFontSize($font, $size) {
	font-family: map-get($font, "family");
	@each $breakpoint-name, $breakpoint-value in $sane-scale {

		@if $breakpoint-name == "default" {
			@include _setFontSize($font, $size, $breakpoint-name);
		}

		@else {
			$media-query: map-deep-get($sane-scale, $breakpoint-name, "media-query");
			@media #{$media-query} {
				@include _setFontSize($font, $size, $breakpoint-name);
			} 
		}
	}
}

